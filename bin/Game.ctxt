#BlueJ class context
comment0.target=Game
comment0.text=\r\n\ Represents\ the\ main\ game\ logic\ for\ a\ grid-based\ game.\ The\ game\ involves\ two\ players\r\n\ (BLUE\ and\ RED)\ who\ take\ turns\ adding\ and\ merging\ blocks\ on\ a\ grid.\ The\ game\ also\r\n\ includes\ walls\ that\ restrict\ block\ movement\ and\ merging.\r\n
comment1.params=
comment1.target=int\ getBlueScore()
comment1.text=\r\n\ @return\ The\ current\ score\ of\ the\ BLUE\ player.\r\n
comment10.params=
comment10.target=BColor\ getCurrentPlayer()
comment10.text=\r\n\ @return\ The\ color\ representing\ the\ current\ player.\r\n
comment11.params=player
comment11.target=void\ setCurrentPlayer(BColor)
comment11.text=\r\n\ Sets\ the\ current\ player.\r\n\ \r\n\ @param\ player\ The\ color\ of\ the\ player\ to\ set\ as\ the\ current\ player.\r\n
comment12.params=
comment12.target=void\ nextPlayer()
comment12.text=\r\n\ Switches\ the\ turn\ to\ the\ next\ player.\r\n
comment13.params=row\ col\ value
comment13.target=boolean\ addBlock(int,\ int,\ int)
comment13.text=\r\n\ Adds\ a\ block\ to\ the\ grid\ at\ the\ specified\ position\ with\ the\ current\ player's\ color.\r\n\ \r\n\ @param\ row\ \ \ The\ row\ index\ of\ the\ block.\r\n\ @param\ col\ \ \ The\ column\ index\ of\ the\ block.\r\n\ @param\ value\ The\ value\ of\ the\ block.\r\n\ @return\ True\ if\ the\ block\ was\ successfully\ added,\ false\ otherwise.\r\n
comment14.params=row\ col\ value\ color
comment14.target=boolean\ addBlock(int,\ int,\ int,\ BColor)
comment14.text=\r\n\ Adds\ a\ block\ to\ the\ grid\ at\ the\ specified\ position\ with\ the\ specified\ player's\ color.\r\n\ \r\n\ @param\ row\ \ \ The\ row\ index\ of\ the\ block.\r\n\ @param\ col\ \ \ The\ column\ index\ of\ the\ block.\r\n\ @param\ value\ The\ value\ of\ the\ block.\r\n\ @param\ color\ The\ color\ of\ the\ block.\r\n\ @return\ True\ if\ the\ block\ was\ successfully\ added,\ false\ otherwise.\r\n
comment15.params=row\ col\ block
comment15.target=void\ setBlock(int,\ int,\ Block)
comment15.text=\r\n\ Sets\ a\ block\ at\ the\ specified\ position\ in\ the\ grid.\r\n\ \r\n\ @param\ row\ \ \ The\ row\ index\ of\ the\ block.\r\n\ @param\ col\ \ \ The\ column\ index\ of\ the\ block.\r\n\ @param\ block\ The\ block\ to\ set.\r\n
comment16.params=row\ col
comment16.target=Block\ getBlock(int,\ int)
comment16.text=\r\n\ Retrieves\ the\ block\ at\ the\ specified\ position\ in\ the\ grid.\r\n\ \r\n\ @param\ row\ The\ row\ index\ of\ the\ block.\r\n\ @param\ col\ The\ column\ index\ of\ the\ block.\r\n\ @return\ The\ block\ at\ the\ specified\ position,\ or\ null\ if\ the\ position\ is\ empty\ or\ invalid.\r\n
comment17.params=
comment17.target=boolean\ hasEmptySpace()
comment17.text=\r\n\ Checks\ if\ there\ is\ any\ empty\ space\ in\ the\ grid.\r\n\ \r\n\ @return\ True\ if\ there\ is\ at\ least\ one\ empty\ space,\ false\ otherwise.\r\n
comment18.params=
comment18.target=java.util.ArrayList\ getEmptyTiles()
comment18.text=\r\n\ Retrieves\ a\ list\ of\ coordinates\ representing\ all\ empty\ tiles\ in\ the\ grid.\r\n\ \r\n\ @return\ A\ list\ of\ coordinates\ of\ empty\ tiles.\r\n
comment19.params=dir
comment19.target=void\ merge(Direction)
comment19.text=\r\n\ Merges\ blocks\ in\ the\ given\ array.\ The\ blocks\ are\ merged\ from\ left\ to\ right.\r\n\ Elements\ will\ always\ be\ merged\ to\ the\ largest\ possible\ element.\r\n\ \r\n\ @param\ dir\ The\ direction\ in\ which\ to\ merge\ blocks.\r\n
comment2.params=
comment2.target=int\ getRedScore()
comment2.text=\r\n\ @return\ The\ current\ score\ of\ the\ RED\ player.\r\n
comment20.params=blocks\ dir
comment20.target=java.util.ArrayList\ check(java.util.ArrayList,\ Direction)
comment20.text=\r\n\ Processes\ a\ list\ of\ blocks\ and\ merges\ them\ according\ to\ the\ game\ rules.\r\n\ \r\n\ @param\ blocks\ The\ list\ of\ blocks\ to\ process.\r\n\ @param\ dir\ \ \ \ The\ direction\ of\ the\ merge.\r\n\ @return\ A\ list\ of\ blocks\ after\ merging.\r\n
comment21.params=
comment21.target=Coordinate\ getRandomEmptyTile()
comment21.text=\r\n\ Retrieves\ a\ random\ empty\ tile\ from\ the\ grid.\r\n\ \r\n\ @return\ A\ coordinate\ representing\ a\ random\ empty\ tile.\r\n
comment22.params=
comment22.target=int[]\ spawnRandomBlock()
comment22.text=\r\n\ Spawns\ a\ random\ block\ on\ the\ grid\ with\ a\ random\ value\ (2,\ 4,\ or\ 8).\r\n\ \r\n\ @return\ An\ array\ containing\ the\ row,\ column,\ and\ value\ of\ the\ spawned\ block.\r\n
comment23.params=
comment23.target=Block[][]\ getGrid()
comment23.text=\r\n\ @return\ The\ current\ state\ of\ the\ grid\ as\ a\ 2D\ array\ of\ blocks.\r\n
comment24.params=client
comment24.target=void\ setClient(GameClient)
comment24.text=\r\n\ Sets\ the\ game\ client\ for\ this\ game\ instance.\r\n\ \r\n\ @param\ client\ The\ GameClient\ to\ associate\ with\ this\ game.\r\n
comment25.params=
comment25.target=boolean\ isTurn()
comment25.text=\r\n\ Checks\ if\ it\ is\ the\ current\ player's\ turn.\r\n\ \r\n\ @return\ True\ if\ it\ is\ the\ current\ player's\ turn,\ false\ otherwise.\r\n
comment3.params=
comment3.target=java.util.Set\ getTopWalls()
comment3.text=\r\n\ @return\ The\ set\ of\ coordinates\ representing\ the\ top\ walls\ of\ the\ grid.\r\n
comment4.params=
comment4.target=java.util.Set\ getLeftWalls()
comment4.text=\r\n\ @return\ The\ set\ of\ coordinates\ representing\ the\ left\ walls\ of\ the\ grid.\r\n
comment5.params=
comment5.target=Game()
comment5.text=\r\n\ Initializes\ a\ new\ game\ instance\ with\ a\ grid,\ walls,\ and\ default\ settings.\r\n
comment6.params=
comment6.target=void\ addWalls()
comment6.text=\r\n\ Adds\ walls\ to\ the\ grid.\ This\ method\ is\ called\ during\ game\ initialization.\r\n
comment7.params=
comment7.target=Game\ copy()
comment7.text=\r\n\ Creates\ a\ copy\ of\ the\ current\ game\ state.\r\n\ \r\n\ @return\ A\ new\ Game\ object\ with\ the\ same\ state\ as\ the\ current\ game.\r\n
comment8.params=
comment8.target=BColor\ getMyColor()
comment9.params=color
comment9.target=void\ setMyColor(BColor)
numComments=26
