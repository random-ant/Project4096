package jaco.mp3.player;

import java.math.BigDecimal;

final class E {
   private float[] a;
   private float[] b;
   private float[] c;
   private int d;
   private float[] e;
   private int f;
   private float g;
   private float[] h;
   private float[] i = new float[32];
   private static final float j = (float)(1.0D / (2.0D * Math.cos(0.04908738521234052D)));
   private static final float k = (float)(1.0D / (2.0D * Math.cos(0.14726215563702155D)));
   private static final float l = (float)(1.0D / (2.0D * Math.cos(0.2454369260617026D)));
   private static final float m = (float)(1.0D / (2.0D * Math.cos(0.3436116964863836D)));
   private static final float n = (float)(1.0D / (2.0D * Math.cos(0.44178646691106466D)));
   private static final float o = (float)(1.0D / (2.0D * Math.cos(0.5399612373357456D)));
   private static final float p = (float)(1.0D / (2.0D * Math.cos(0.6381360077604268D)));
   private static final float q = (float)(1.0D / (2.0D * Math.cos(0.7363107781851077D)));
   private static final float r = (float)(1.0D / (2.0D * Math.cos(0.8344855486097889D)));
   private static final float s = (float)(1.0D / (2.0D * Math.cos(0.9326603190344698D)));
   private static final float t = (float)(1.0D / (2.0D * Math.cos(1.030835089459151D)));
   private static final float u = (float)(1.0D / (2.0D * Math.cos(1.1290098598838318D)));
   private static final float v = (float)(1.0D / (2.0D * Math.cos(1.227184630308513D)));
   private static final float w = (float)(1.0D / (2.0D * Math.cos(1.325359400733194D)));
   private static final float x = (float)(1.0D / (2.0D * Math.cos(1.423534171157875D)));
   private static final float y = (float)(1.0D / (2.0D * Math.cos(1.521708941582556D)));
   private static final float z = (float)(1.0D / (2.0D * Math.cos(0.09817477042468103D)));
   private static final float A = (float)(1.0D / (2.0D * Math.cos(0.2945243112740431D)));
   private static final float B = (float)(1.0D / (2.0D * Math.cos(0.4908738521234052D)));
   private static final float C = (float)(1.0D / (2.0D * Math.cos(0.6872233929727672D)));
   private static final float D = (float)(1.0D / (2.0D * Math.cos(0.8835729338221293D)));
   private static final float E = (float)(1.0D / (2.0D * Math.cos(1.0799224746714913D)));
   private static final float F = (float)(1.0D / (2.0D * Math.cos(1.2762720155208536D)));
   private static final float G = (float)(1.0D / (2.0D * Math.cos(1.4726215563702154D)));
   private static final float H = (float)(1.0D / (2.0D * Math.cos(0.19634954084936207D)));
   private static final float I = (float)(1.0D / (2.0D * Math.cos(0.5890486225480862D)));
   private static final float J = (float)(1.0D / (2.0D * Math.cos(0.9817477042468103D)));
   private static final float K = (float)(1.0D / (2.0D * Math.cos(1.3744467859455345D)));
   private static final float L = (float)(1.0D / (2.0D * Math.cos(0.39269908169872414D)));
   private static final float M = (float)(1.0D / (2.0D * Math.cos(1.1780972450961724D)));
   private static final float N = (float)(1.0D / (2.0D * Math.cos(0.7853981633974483D)));
   private static float[] O = null;
   private static float[][] P = null;

   public E(int var1, float var2) {
      if (O == null) {
         P = a(O = b(), 16);
      }

      this.a = new float[512];
      this.b = new float[512];
      this.e = new float[32];
      this.f = var1;
      this.g = var2;
      this.b(this.h);
      this.a();
   }

   private void b(float[] var1) {
      this.h = var1;
      if (this.h == null) {
         this.h = new float[32];

         for(int var2 = 0; var2 < 32; ++var2) {
            this.h[var2] = 1.0F;
         }
      }

      if (this.h.length < 32) {
         throw new IllegalArgumentException("eq0");
      }
   }

   private void a() {
      int var1;
      for(var1 = 0; var1 < 512; ++var1) {
         this.a[var1] = this.b[var1] = 0.0F;
      }

      for(var1 = 0; var1 < 32; ++var1) {
         this.e[var1] = 0.0F;
      }

      this.c = this.a;
      this.d = 15;
   }

   public final void a(float var1, int var2) {
      this.e[var2] = this.h[var2] * var1;
   }

   public final void a(float[] var1) {
      for(int var2 = 31; var2 >= 0; --var2) {
         this.e[var2] = var1[var2] * this.h[var2];
      }

   }

   public final void a(L var1) {
      float[] var3;
      float var4 = (var3 = this.e)[0];
      float var6 = var3[1];
      float var8 = var3[2];
      float var10 = var3[3];
      float var12 = var3[4];
      float var14 = var3[5];
      float var16 = var3[6];
      float var18 = var3[7];
      float var19 = var3[8];
      float var21 = var3[9];
      float var23 = var3[10];
      float var25 = var3[11];
      float var27 = var3[12];
      float var29 = var3[13];
      float var31 = var3[14];
      float var33 = var3[15];
      float var35 = var3[16];
      float var36 = var3[17];
      float var37 = var3[18];
      float var38 = var3[19];
      float var39 = var3[20];
      float var40 = var3[21];
      float var41 = var3[22];
      float var42 = var3[23];
      float var43 = var3[24];
      float var44 = var3[25];
      float var45 = var3[26];
      float var64 = var3[27];
      float var65 = var3[28];
      float var66 = var3[29];
      float var67 = var3[30];
      float var68 = var3[31];
      float var69 = var4 + var68;
      float var70 = var6 + var67;
      float var71 = var8 + var66;
      float var72 = var10 + var65;
      float var73 = var12 + var64;
      float var74 = var14 + var45;
      float var75 = var16 + var44;
      float var76 = var18 + var43;
      float var77 = var19 + var42;
      float var78 = var21 + var41;
      float var79 = var23 + var40;
      float var80 = var25 + var39;
      float var81 = var27 + var38;
      float var82 = var29 + var37;
      float var83 = var31 + var36;
      float var84 = var33 + var35;
      float var85 = var69 + var84;
      float var86 = var70 + var83;
      float var87 = var71 + var82;
      float var88 = var72 + var81;
      float var89 = var73 + var80;
      float var90 = var74 + var79;
      float var91 = var75 + var78;
      float var92 = var76 + var77;
      float var93 = (var69 - var84) * z;
      float var94 = (var70 - var83) * A;
      float var95 = (var71 - var82) * B;
      float var96 = (var72 - var81) * C;
      float var97 = (var73 - var80) * D;
      float var98 = (var74 - var79) * E;
      float var99 = (var75 - var78) * F;
      float var100 = (var76 - var77) * G;
      var69 = var85 + var92;
      var70 = var86 + var91;
      var71 = var87 + var90;
      var72 = var88 + var89;
      var73 = (var85 - var92) * H;
      var74 = (var86 - var91) * I;
      var75 = (var87 - var90) * J;
      var76 = (var88 - var89) * K;
      var77 = var93 + var100;
      var78 = var94 + var99;
      var79 = var95 + var98;
      var80 = var96 + var97;
      var81 = (var93 - var100) * H;
      var82 = (var94 - var99) * I;
      var83 = (var95 - var98) * J;
      var84 = (var96 - var97) * K;
      var85 = var69 + var72;
      var86 = var70 + var71;
      var87 = (var69 - var72) * L;
      var88 = (var70 - var71) * M;
      var89 = var73 + var76;
      var90 = var74 + var75;
      var91 = (var73 - var76) * L;
      var92 = (var74 - var75) * M;
      var93 = var77 + var80;
      var94 = var78 + var79;
      var95 = (var77 - var80) * L;
      var96 = (var78 - var79) * M;
      var97 = var81 + var84;
      var98 = var82 + var83;
      var99 = (var81 - var84) * L;
      var100 = (var82 - var83) * M;
      var69 = var85 + var86;
      var70 = (var85 - var86) * N;
      var71 = var87 + var88;
      var72 = (var87 - var88) * N;
      var73 = var89 + var90;
      var74 = (var89 - var90) * N;
      var75 = var91 + var92;
      var76 = (var91 - var92) * N;
      var77 = var93 + var94;
      var78 = (var93 - var94) * N;
      var79 = var95 + var96;
      var80 = (var95 - var96) * N;
      var81 = var97 + var98;
      var82 = (var97 - var98) * N;
      var83 = var99 + var100;
      var84 = (var99 - var100) * N;
      float var15 = var76;
      float var7;
      float var22 = -(var7 = var76 + var74) - var75;
      float var30 = -var75 - var76 - var73;
      float var17 = var84;
      float var13;
      float var9 = (var13 = var84 + var80) + var82;
      float var5;
      float var20 = -(var5 = var84 + var82 + var78) - var83;
      float var101;
      float var24 = (var101 = -var83 - var84 - var79 - var80) - var82;
      float var32 = -var83 - var84 - var81 - var77;
      float var28 = var101 - var81;
      float var34 = -var69;
      float var106 = var70;
      float var11 = var72;
      float var26 = -var72 - var71;
      var69 = (var4 - var68) * j;
      var70 = (var6 - var67) * k;
      var71 = (var8 - var66) * l;
      var72 = (var10 - var65) * m;
      var73 = (var12 - var64) * n;
      var74 = (var14 - var45) * o;
      var75 = (var16 - var44) * p;
      var76 = (var18 - var43) * q;
      var77 = (var19 - var42) * r;
      var78 = (var21 - var41) * s;
      var79 = (var23 - var40) * t;
      var80 = (var25 - var39) * u;
      var81 = (var27 - var38) * v;
      var82 = (var29 - var37) * w;
      var83 = (var31 - var36) * x;
      var84 = (var33 - var35) * y;
      var85 = var69 + var84;
      var86 = var70 + var83;
      var87 = var71 + var82;
      var88 = var72 + var81;
      var89 = var73 + var80;
      var90 = var74 + var79;
      var91 = var75 + var78;
      var92 = var76 + var77;
      var93 = (var69 - var84) * z;
      var94 = (var70 - var83) * A;
      var95 = (var71 - var82) * B;
      var96 = (var72 - var81) * C;
      var97 = (var73 - var80) * D;
      var98 = (var74 - var79) * E;
      var99 = (var75 - var78) * F;
      var100 = (var76 - var77) * G;
      var69 = var85 + var92;
      var70 = var86 + var91;
      var71 = var87 + var90;
      var72 = var88 + var89;
      var73 = (var85 - var92) * H;
      var74 = (var86 - var91) * I;
      var75 = (var87 - var90) * J;
      var76 = (var88 - var89) * K;
      var77 = var93 + var100;
      var78 = var94 + var99;
      var79 = var95 + var98;
      var80 = var96 + var97;
      var81 = (var93 - var100) * H;
      var82 = (var94 - var99) * I;
      var83 = (var95 - var98) * J;
      var84 = (var96 - var97) * K;
      var85 = var69 + var72;
      var86 = var70 + var71;
      var87 = (var69 - var72) * L;
      var88 = (var70 - var71) * M;
      var89 = var73 + var76;
      var90 = var74 + var75;
      var91 = (var73 - var76) * L;
      var92 = (var74 - var75) * M;
      var93 = var77 + var80;
      var94 = var78 + var79;
      var95 = (var77 - var80) * L;
      var96 = (var78 - var79) * M;
      var97 = var81 + var84;
      var98 = var82 + var83;
      var99 = (var81 - var84) * L;
      var100 = (var82 - var83) * M;
      var69 = var85 + var86;
      var70 = (var85 - var86) * N;
      var71 = var87 + var88;
      var72 = (var87 - var88) * N;
      var73 = var89 + var90;
      var74 = (var89 - var90) * N;
      var75 = var91 + var92;
      var76 = (var91 - var92) * N;
      var77 = var93 + var94;
      var78 = (var93 - var94) * N;
      var79 = var95 + var96;
      var80 = (var95 - var96) * N;
      var81 = var97 + var98;
      var82 = (var97 - var98) * N;
      var83 = var99 + var100;
      var8 = (var14 = (var16 = (var18 = (var99 - var100) * N) + var76) + var80) + var74 + var82;
      var10 = (var12 = var18 + var80 + var72) + var82;
      var19 = -(var4 = (var101 = var82 + var18 + var78) + var70) - var83;
      var21 = -(var6 = var101 + var74 + var76) - var75 - var83;
      var25 = (var101 = -var79 - var80 - var83 - var18) - var82 - var71 - var72;
      var23 = var101 - var82 - var74 - var75 - var76;
      var27 = var101 - var81 - var71 - var72;
      float var102;
      var29 = var101 - var81 - (var102 = var73 + var75 + var76);
      var33 = (var101 = -var77 - var81 - var83 - var18) - var69;
      var31 = var101 - var102;
      float[] var103 = this.c;
      int var104 = this.d;
      var103[var104 + 0] = var106;
      var103[var104 + 16] = var4;
      var103[var104 + 32] = var5;
      var103[var104 + 48] = var6;
      var103[var104 + 64] = var7;
      var103[var104 + 80] = var8;
      var103[var104 + 96] = var9;
      var103[var104 + 112] = var10;
      var103[var104 + 128] = var11;
      var103[var104 + 144] = var12;
      var103[var104 + 160] = var13;
      var103[var104 + 176] = var14;
      var103[var104 + 192] = var15;
      var103[var104 + 208] = var16;
      var103[var104 + 224] = var17;
      var103[var104 + 240] = var18;
      var103[var104 + 256] = 0.0F;
      var103[var104 + 272] = -var18;
      var103[var104 + 288] = -var17;
      var103[var104 + 304] = -var16;
      var103[var104 + 320] = -var15;
      var103[var104 + 336] = -var14;
      var103[var104 + 352] = -var13;
      var103[var104 + 368] = -var12;
      var103[var104 + 384] = -var11;
      var103[var104 + 400] = -var10;
      var103[var104 + 416] = -var9;
      var103[var104 + 432] = -var8;
      var103[var104 + 448] = -var7;
      var103[var104 + 464] = -var6;
      var103[var104 + 480] = -var5;
      var103[var104 + 496] = -var4;
      (var103 = this.c == this.a ? this.b : this.a)[var104 + 0] = -var106;
      var103[var104 + 16] = var19;
      var103[var104 + 32] = var20;
      var103[var104 + 48] = var21;
      var103[var104 + 64] = var22;
      var103[var104 + 80] = var23;
      var103[var104 + 96] = var24;
      var103[var104 + 112] = var25;
      var103[var104 + 128] = var26;
      var103[var104 + 144] = var27;
      var103[var104 + 160] = var28;
      var103[var104 + 176] = var29;
      var103[var104 + 192] = var30;
      var103[var104 + 208] = var31;
      var103[var104 + 224] = var32;
      var103[var104 + 240] = var33;
      var103[var104 + 256] = var34;
      var103[var104 + 272] = var33;
      var103[var104 + 288] = var32;
      var103[var104 + 304] = var31;
      var103[var104 + 320] = var30;
      var103[var104 + 336] = var29;
      var103[var104 + 352] = var28;
      var103[var104 + 368] = var27;
      var103[var104 + 384] = var26;
      var103[var104 + 400] = var25;
      var103[var104 + 416] = var24;
      var103[var104 + 432] = var23;
      var103[var104 + 448] = var22;
      var103[var104 + 464] = var21;
      var103[var104 + 480] = var20;
      var103[var104 + 496] = var19;
      E var107;
      float[] var108;
      float[] var109;
      int var110;
      int var111;
      float[] var112;
      float[] var113;
      label171:
      switch(this.d) {
      case 0:
         var107 = this;
         var108 = this.c;
         var109 = this.i;
         var110 = 0;
         var111 = 0;

         while(true) {
            if (var111 >= 32) {
               break label171;
            }

            var113 = P[var111];
            var9 = (var108[var110 + 0] * var113[0] + var108[var110 + 15] * var113[1] + var108[var110 + 14] * var113[2] + var108[var110 + 13] * var113[3] + var108[var110 + 12] * var113[4] + var108[var110 + 11] * var113[5] + var108[var110 + 10] * var113[6] + var108[var110 + 9] * var113[7] + var108[var110 + 8] * var113[8] + var108[var110 + 7] * var113[9] + var108[var110 + 6] * var113[10] + var108[var110 + 5] * var113[11] + var108[var110 + 4] * var113[12] + var108[var110 + 3] * var113[13] + var108[var110 + 2] * var113[14] + var108[var110 + 1] * var113[15]) * var107.g;
            var109[var111] = var9;
            var110 += 16;
            ++var111;
         }
      case 1:
         var107 = this;
         var108 = this.c;
         var109 = this.i;
         var110 = 0;
         var111 = 0;

         while(true) {
            if (var111 >= 32) {
               break label171;
            }

            var112 = P[var111];
            var10 = (var108[var110 + 1] * var112[0] + var108[var110 + 0] * var112[1] + var108[var110 + 15] * var112[2] + var108[var110 + 14] * var112[3] + var108[var110 + 13] * var112[4] + var108[var110 + 12] * var112[5] + var108[var110 + 11] * var112[6] + var108[var110 + 10] * var112[7] + var108[var110 + 9] * var112[8] + var108[var110 + 8] * var112[9] + var108[var110 + 7] * var112[10] + var108[var110 + 6] * var112[11] + var108[var110 + 5] * var112[12] + var108[var110 + 4] * var112[13] + var108[var110 + 3] * var112[14] + var108[var110 + 2] * var112[15]) * var107.g;
            var109[var111] = var10;
            var110 += 16;
            ++var111;
         }
      case 2:
         var107 = this;
         var108 = this.c;
         var109 = this.i;
         var110 = 0;
         var111 = 0;

         while(true) {
            if (var111 >= 32) {
               break label171;
            }

            var112 = P[var111];
            var10 = (var108[var110 + 2] * var112[0] + var108[var110 + 1] * var112[1] + var108[var110 + 0] * var112[2] + var108[var110 + 15] * var112[3] + var108[var110 + 14] * var112[4] + var108[var110 + 13] * var112[5] + var108[var110 + 12] * var112[6] + var108[var110 + 11] * var112[7] + var108[var110 + 10] * var112[8] + var108[var110 + 9] * var112[9] + var108[var110 + 8] * var112[10] + var108[var110 + 7] * var112[11] + var108[var110 + 6] * var112[12] + var108[var110 + 5] * var112[13] + var108[var110 + 4] * var112[14] + var108[var110 + 3] * var112[15]) * var107.g;
            var109[var111] = var10;
            var110 += 16;
            ++var111;
         }
      case 3:
         var107 = this;
         var108 = this.c;
         float[] var115 = this.i;
         var111 = 0;
         int var114 = 0;

         while(true) {
            if (var114 >= 32) {
               break label171;
            }

            var113 = P[var114];
            var11 = (var108[var111 + 3] * var113[0] + var108[var111 + 2] * var113[1] + var108[var111 + 1] * var113[2] + var108[var111 + 0] * var113[3] + var108[var111 + 15] * var113[4] + var108[var111 + 14] * var113[5] + var108[var111 + 13] * var113[6] + var108[var111 + 12] * var113[7] + var108[var111 + 11] * var113[8] + var108[var111 + 10] * var113[9] + var108[var111 + 9] * var113[10] + var108[var111 + 8] * var113[11] + var108[var111 + 7] * var113[12] + var108[var111 + 6] * var113[13] + var108[var111 + 5] * var113[14] + var108[var111 + 4] * var113[15]) * var107.g;
            var115[var114] = var11;
            var111 += 16;
            ++var114;
         }
      case 4:
         var107 = this;
         var108 = this.c;
         var109 = this.i;
         var110 = 0;
         var111 = 0;

         while(true) {
            if (var111 >= 32) {
               break label171;
            }

            var112 = P[var111];
            var10 = (var108[var110 + 4] * var112[0] + var108[var110 + 3] * var112[1] + var108[var110 + 2] * var112[2] + var108[var110 + 1] * var112[3] + var108[var110 + 0] * var112[4] + var108[var110 + 15] * var112[5] + var108[var110 + 14] * var112[6] + var108[var110 + 13] * var112[7] + var108[var110 + 12] * var112[8] + var108[var110 + 11] * var112[9] + var108[var110 + 10] * var112[10] + var108[var110 + 9] * var112[11] + var108[var110 + 8] * var112[12] + var108[var110 + 7] * var112[13] + var108[var110 + 6] * var112[14] + var108[var110 + 5] * var112[15]) * var107.g;
            var109[var111] = var10;
            var110 += 16;
            ++var111;
         }
      case 5:
         var107 = this;
         var108 = this.c;
         var109 = this.i;
         var110 = 0;
         var111 = 0;

         while(true) {
            if (var111 >= 32) {
               break label171;
            }

            var112 = P[var111];
            var10 = (var108[var110 + 5] * var112[0] + var108[var110 + 4] * var112[1] + var108[var110 + 3] * var112[2] + var108[var110 + 2] * var112[3] + var108[var110 + 1] * var112[4] + var108[var110 + 0] * var112[5] + var108[var110 + 15] * var112[6] + var108[var110 + 14] * var112[7] + var108[var110 + 13] * var112[8] + var108[var110 + 12] * var112[9] + var108[var110 + 11] * var112[10] + var108[var110 + 10] * var112[11] + var108[var110 + 9] * var112[12] + var108[var110 + 8] * var112[13] + var108[var110 + 7] * var112[14] + var108[var110 + 6] * var112[15]) * var107.g;
            var109[var111] = var10;
            var110 += 16;
            ++var111;
         }
      case 6:
         var107 = this;
         var108 = this.c;
         var109 = this.i;
         var110 = 0;
         var111 = 0;

         while(true) {
            if (var111 >= 32) {
               break label171;
            }

            var112 = P[var111];
            var10 = (var108[var110 + 6] * var112[0] + var108[var110 + 5] * var112[1] + var108[var110 + 4] * var112[2] + var108[var110 + 3] * var112[3] + var108[var110 + 2] * var112[4] + var108[var110 + 1] * var112[5] + var108[var110 + 0] * var112[6] + var108[var110 + 15] * var112[7] + var108[var110 + 14] * var112[8] + var108[var110 + 13] * var112[9] + var108[var110 + 12] * var112[10] + var108[var110 + 11] * var112[11] + var108[var110 + 10] * var112[12] + var108[var110 + 9] * var112[13] + var108[var110 + 8] * var112[14] + var108[var110 + 7] * var112[15]) * var107.g;
            var109[var111] = var10;
            var110 += 16;
            ++var111;
         }
      case 7:
         var107 = this;
         var108 = this.c;
         var109 = this.i;
         var110 = 0;
         var111 = 0;

         while(true) {
            if (var111 >= 32) {
               break label171;
            }

            var112 = P[var111];
            var10 = (var108[var110 + 7] * var112[0] + var108[var110 + 6] * var112[1] + var108[var110 + 5] * var112[2] + var108[var110 + 4] * var112[3] + var108[var110 + 3] * var112[4] + var108[var110 + 2] * var112[5] + var108[var110 + 1] * var112[6] + var108[var110 + 0] * var112[7] + var108[var110 + 15] * var112[8] + var108[var110 + 14] * var112[9] + var108[var110 + 13] * var112[10] + var108[var110 + 12] * var112[11] + var108[var110 + 11] * var112[12] + var108[var110 + 10] * var112[13] + var108[var110 + 9] * var112[14] + var108[var110 + 8] * var112[15]) * var107.g;
            var109[var111] = var10;
            var110 += 16;
            ++var111;
         }
      case 8:
         var107 = this;
         var108 = this.c;
         var109 = this.i;
         var110 = 0;
         var111 = 0;

         while(true) {
            if (var111 >= 32) {
               break label171;
            }

            var112 = P[var111];
            var10 = (var108[var110 + 8] * var112[0] + var108[var110 + 7] * var112[1] + var108[var110 + 6] * var112[2] + var108[var110 + 5] * var112[3] + var108[var110 + 4] * var112[4] + var108[var110 + 3] * var112[5] + var108[var110 + 2] * var112[6] + var108[var110 + 1] * var112[7] + var108[var110 + 0] * var112[8] + var108[var110 + 15] * var112[9] + var108[var110 + 14] * var112[10] + var108[var110 + 13] * var112[11] + var108[var110 + 12] * var112[12] + var108[var110 + 11] * var112[13] + var108[var110 + 10] * var112[14] + var108[var110 + 9] * var112[15]) * var107.g;
            var109[var111] = var10;
            var110 += 16;
            ++var111;
         }
      case 9:
         var107 = this;
         var108 = this.c;
         var109 = this.i;
         var110 = 0;
         var111 = 0;

         while(true) {
            if (var111 >= 32) {
               break label171;
            }

            var112 = P[var111];
            var10 = (var108[var110 + 9] * var112[0] + var108[var110 + 8] * var112[1] + var108[var110 + 7] * var112[2] + var108[var110 + 6] * var112[3] + var108[var110 + 5] * var112[4] + var108[var110 + 4] * var112[5] + var108[var110 + 3] * var112[6] + var108[var110 + 2] * var112[7] + var108[var110 + 1] * var112[8] + var108[var110 + 0] * var112[9] + var108[var110 + 15] * var112[10] + var108[var110 + 14] * var112[11] + var108[var110 + 13] * var112[12] + var108[var110 + 12] * var112[13] + var108[var110 + 11] * var112[14] + var108[var110 + 10] * var112[15]) * var107.g;
            var109[var111] = var10;
            var110 += 16;
            ++var111;
         }
      case 10:
         var107 = this;
         var108 = this.c;
         var109 = this.i;
         var110 = 0;
         var111 = 0;

         while(true) {
            if (var111 >= 32) {
               break label171;
            }

            var112 = P[var111];
            var10 = (var108[var110 + 10] * var112[0] + var108[var110 + 9] * var112[1] + var108[var110 + 8] * var112[2] + var108[var110 + 7] * var112[3] + var108[var110 + 6] * var112[4] + var108[var110 + 5] * var112[5] + var108[var110 + 4] * var112[6] + var108[var110 + 3] * var112[7] + var108[var110 + 2] * var112[8] + var108[var110 + 1] * var112[9] + var108[var110 + 0] * var112[10] + var108[var110 + 15] * var112[11] + var108[var110 + 14] * var112[12] + var108[var110 + 13] * var112[13] + var108[var110 + 12] * var112[14] + var108[var110 + 11] * var112[15]) * var107.g;
            var109[var111] = var10;
            var110 += 16;
            ++var111;
         }
      case 11:
         var107 = this;
         var108 = this.c;
         var109 = this.i;
         var110 = 0;
         var111 = 0;

         while(true) {
            if (var111 >= 32) {
               break label171;
            }

            var112 = P[var111];
            var10 = (var108[var110 + 11] * var112[0] + var108[var110 + 10] * var112[1] + var108[var110 + 9] * var112[2] + var108[var110 + 8] * var112[3] + var108[var110 + 7] * var112[4] + var108[var110 + 6] * var112[5] + var108[var110 + 5] * var112[6] + var108[var110 + 4] * var112[7] + var108[var110 + 3] * var112[8] + var108[var110 + 2] * var112[9] + var108[var110 + 1] * var112[10] + var108[var110 + 0] * var112[11] + var108[var110 + 15] * var112[12] + var108[var110 + 14] * var112[13] + var108[var110 + 13] * var112[14] + var108[var110 + 12] * var112[15]) * var107.g;
            var109[var111] = var10;
            var110 += 16;
            ++var111;
         }
      case 12:
         var107 = this;
         var108 = this.c;
         var109 = this.i;
         var110 = 0;
         var111 = 0;

         while(true) {
            if (var111 >= 32) {
               break label171;
            }

            var112 = P[var111];
            var10 = (var108[var110 + 12] * var112[0] + var108[var110 + 11] * var112[1] + var108[var110 + 10] * var112[2] + var108[var110 + 9] * var112[3] + var108[var110 + 8] * var112[4] + var108[var110 + 7] * var112[5] + var108[var110 + 6] * var112[6] + var108[var110 + 5] * var112[7] + var108[var110 + 4] * var112[8] + var108[var110 + 3] * var112[9] + var108[var110 + 2] * var112[10] + var108[var110 + 1] * var112[11] + var108[var110 + 0] * var112[12] + var108[var110 + 15] * var112[13] + var108[var110 + 14] * var112[14] + var108[var110 + 13] * var112[15]) * var107.g;
            var109[var111] = var10;
            var110 += 16;
            ++var111;
         }
      case 13:
         var107 = this;
         var108 = this.c;
         var109 = this.i;
         var110 = 0;
         var111 = 0;

         while(true) {
            if (var111 >= 32) {
               break label171;
            }

            var112 = P[var111];
            var10 = (var108[var110 + 13] * var112[0] + var108[var110 + 12] * var112[1] + var108[var110 + 11] * var112[2] + var108[var110 + 10] * var112[3] + var108[var110 + 9] * var112[4] + var108[var110 + 8] * var112[5] + var108[var110 + 7] * var112[6] + var108[var110 + 6] * var112[7] + var108[var110 + 5] * var112[8] + var108[var110 + 4] * var112[9] + var108[var110 + 3] * var112[10] + var108[var110 + 2] * var112[11] + var108[var110 + 1] * var112[12] + var108[var110 + 0] * var112[13] + var108[var110 + 15] * var112[14] + var108[var110 + 14] * var112[15]) * var107.g;
            var109[var111] = var10;
            var110 += 16;
            ++var111;
         }
      case 14:
         var107 = this;
         var108 = this.c;
         var109 = this.i;
         var110 = 0;
         var111 = 0;

         while(true) {
            if (var111 >= 32) {
               break label171;
            }

            var112 = P[var111];
            var10 = (var108[var110 + 14] * var112[0] + var108[var110 + 13] * var112[1] + var108[var110 + 12] * var112[2] + var108[var110 + 11] * var112[3] + var108[var110 + 10] * var112[4] + var108[var110 + 9] * var112[5] + var108[var110 + 8] * var112[6] + var108[var110 + 7] * var112[7] + var108[var110 + 6] * var112[8] + var108[var110 + 5] * var112[9] + var108[var110 + 4] * var112[10] + var108[var110 + 3] * var112[11] + var108[var110 + 2] * var112[12] + var108[var110 + 1] * var112[13] + var108[var110 + 0] * var112[14] + var108[var110 + 15] * var112[15]) * var107.g;
            var109[var111] = var10;
            var110 += 16;
            ++var111;
         }
      case 15:
         var107 = this;
         var108 = this.c;
         var109 = this.i;
         var110 = 0;

         for(var111 = 0; var111 < 32; ++var111) {
            var113 = P[var111];
            var9 = (var108[var110 + 15] * var113[0] + var108[var110 + 14] * var113[1] + var108[var110 + 13] * var113[2] + var108[var110 + 12] * var113[3] + var108[var110 + 11] * var113[4] + var108[var110 + 10] * var113[5] + var108[var110 + 9] * var113[6] + var108[var110 + 8] * var113[7] + var108[var110 + 7] * var113[8] + var108[var110 + 6] * var113[9] + var108[var110 + 5] * var113[10] + var108[var110 + 4] * var113[11] + var108[var110 + 3] * var113[12] + var108[var110 + 2] * var113[13] + var108[var110 + 1] * var113[14] + var108[var110 + 0] * var113[15]) * var107.g;
            var109[var111] = var9;
            var110 += 16;
         }
      }

      if (var1 != null) {
         var1.a(this.f, this.i);
      }

      this.d = this.d + 1 & 15;
      this.c = this.c == this.a ? this.b : this.a;

      for(int var105 = 0; var105 < 32; ++var105) {
         this.e[var105] = 0.0F;
      }

   }

   private static float[] b() {
      String var0 = "0,-0.000442504999227821826934814453125,0.0032501220703125,-0.0070037841796875,0.0310821533203125,-0.0786285400390625,0.100311279296875,-0.5720367431640625,1.144989013671875,0.5720367431640625,0.100311279296875,0.0786285400390625,0.0310821533203125,0.0070037841796875,0.0032501220703125,0.000442504999227821826934814453125,-0.0000152590000652708113193511962890625,-0.0004730219952762126922607421875,0.003326416015625,-0.007919312454760074615478515625,0.030517578125,-0.0841827392578125,0.0909271240234375,-0.6002197265625,1.144287109375,0.5438232421875,0.108856201171875,0.07305908203125,0.0314788818359375,0.0061187739484012126922607421875,0.00317382789216935634613037109375,0.00039672901039011776447296142578125,-0.0000152590000652708113193511962890625,-0.0005340580246411263942718505859375,0.00338745093904435634613037109375,-0.0088653564453125,0.02978515625,-0.0897064208984375,0.0806884765625,-0.6282958984375,1.1422119140625,0.5156097412109375,0.1165771484375,0.0675201416015625,0.03173828125,0.0052947998046875,0.0030822749249637126922607421875,0.0003662109957076609134674072265625,-0.0000152590000652708113193511962890625,-0.000579833984375,0.0034332280047237873077392578125,-0.0098419189453125,0.0288848876953125,-0.0951690673828125,0.0695953369140625,-0.656219482421875,1.138763427734375,0.4874725341796875,0.12347412109375,0.0619964599609375,0.0318450927734375,0.004486083984375,0.00299072288908064365386962890625,0.00032043500686995685100555419921875,-0.0000152590000652708113193511962890625,-0.000625610002316534519195556640625,0.00346374488435685634613037109375,-0.0108489990234375,0.027801513671875,-0.1005401611328125,0.0576171875,-0.6839141845703125,1.1339263916015625,0.45947265625,0.12957763671875,0.0565338134765625,0.0318145751953125,0.0037231449969112873077392578125,0.002899169921875,0.0002899169921875,-0.0000152590000652708113193511962890625,-0.0006866459734737873077392578125,0.00347900390625,-0.0118865966796875,0.0265350341796875,-0.1058197021484375,0.0447845458984375,-0.7113189697265625,1.12774658203125,0.4316558837890625,0.1348876953125,0.0511322021484375,0.0316619873046875,0.0030059809796512126922607421875,0.0027923579327762126922607421875,0.0002593990066088736057281494140625,-0.0000152590000652708113193511962890625,-0.000747681013308465480804443359375,0.00347900390625,-0.012939453125,0.02508544921875,-0.1109466552734375,0.0310821533203125,-0.738372802734375,1.1202239990234375,0.404083251953125,0.1394500732421875,0.04583740234375,0.0313873291015625,0.00233459495939314365386962890625,0.00268554710783064365386962890625,0.00024414100334979593753814697265625,-0.000030518000130541622638702392578125,-0.0008087159949354827404022216796875,0.00346374488435685634613037109375,-0.0140228271484375,0.0234222412109375,-0.1159210205078125,0.016510009765625,-0.7650299072265625,1.1113739013671875,0.376800537109375,0.1432647705078125,0.0406341552734375,0.031005859375,0.0016937260515987873077392578125,0.0025787348859012126922607421875,0.000213623003219254314899444580078125,-0.000030518000130541622638702392578125,-0.00088500999845564365386962890625,0.00341796898283064365386962890625,-0.0151214599609375,0.021575927734375,-0.120697021484375,0.00106811500154435634613037109375,-0.7912139892578125,1.1012115478515625,0.3498687744140625,0.1463623046875,0.035552978515625,0.0305328369140625,0.00109863304533064365386962890625,0.0024566650390625,0.00019836399587802588939666748046875,-0.000030518000130541622638702392578125,-0.0009613040019758045673370361328125,0.0033721919171512126922607421875,-0.0162353515625,0.01953125,-0.1252593994140625,-0.015228270553052425384521484375,-0.816864013671875,1.08978271484375,0.3233184814453125,0.148773193359375,0.030609130859375,0.029937744140625,0.0005493159987963736057281494140625,0.0023498539812862873077392578125,0.00016784699982963502407073974609375,-0.000030518000130541622638702392578125,-0.001037598005495965480804443359375,0.0032806401140987873077392578125,-0.0173492431640625,0.0172576904296875,-0.1295623779296875,-0.032379150390625,-0.841949462890625,1.077117919921875,0.297210693359375,0.1504974365234375,0.02581787109375,0.0292816162109375,0.000030518000130541622638702392578125,0.0022430419921875,0.000152588007040321826934814453125,-0.00004577599975164048373699188232421875,-0.001113891950808465480804443359375,0.00317382789216935634613037109375,-0.018463134765625,0.014801025390625,-0.1335906982421875,-0.05035400390625,-0.866363525390625,1.0632171630859375,0.2715911865234375,0.1515960693359375,0.02117919921875,0.028533935546875,-0.000442504999227821826934814453125,0.00212097191251814365386962890625,0.000137328999699093401432037353515625,-0.00004577599975164048373699188232421875,-0.001205443986691534519195556640625,0.00305175804533064365386962890625,-0.0195770263671875,0.012115479446947574615478515625,-0.137298583984375,-0.0691680908203125,-0.8900909423828125,1.04815673828125,0.2465057373046875,0.152069091796875,0.0167083740234375,0.0277252197265625,-0.0008697509765625,0.00201415992341935634613037109375,0.0001220699996338225901126861572265625,-0.00006103499981691129505634307861328125,-0.001296996953897178173065185546875,0.00288391089998185634613037109375,-0.02069091796875,0.0092315673828125,-0.1406707763671875,-0.088775634765625,-0.913055419921875,1.0319366455078125,0.22198486328125,0.1519622802734375,0.012420654296875,0.0268402099609375,-0.0012664790265262126922607421875,0.001907348982058465480804443359375,0.0001068119963747449219226837158203125,-0.00006103499981691129505634307861328125,-0.00138855003751814365386962890625,0.00270080589689314365386962890625,-0.02178955078125,0.006134033203125,-0.1436767578125,-0.109161376953125,-0.9351959228515625,1.014617919921875,0.19805908203125,0.15130615234375,0.0083160400390625,0.025909423828125,-0.001617431989870965480804443359375,0.001785277971066534519195556640625,0.0001068119963747449219226837158203125,-0.0000762940035201609134674072265625,-0.0014801030047237873077392578125,0.0024871830828487873077392578125,-0.022857666015625,0.0028228759765625,-0.1462554931640625,-0.13031005859375,-0.95648193359375,0.996246337890625,0.1747894287109375,0.150115966796875,0.0043945307843387126922607421875,0.024932861328125,-0.00193786597810685634613037109375,0.0016937260515987873077392578125,0.0000915530035854317247867584228515625,-0.0000762940035201609134674072265625,-0.001586913946084678173065185546875,0.00222778297029435634613037109375,-0.0239105224609375,-0.0006866459734737873077392578125,-0.1484222412109375,-0.1522064208984375,-0.9768524169921875,0.9768524169921875,0.1522064208984375,0.1484222412109375,0.0006866459734737873077392578125,0.0239105224609375,-0.00222778297029435634613037109375,0.001586913946084678173065185546875,0.0000762940035201609134674072265625,-0.0000915530035854317247867584228515625,-0.0016937260515987873077392578125,0.00193786597810685634613037109375,-0.024932861328125,-0.0043945307843387126922607421875,-0.150115966796875,-0.1747894287109375,-0.996246337890625,0.95648193359375,0.13031005859375,0.1462554931640625,-0.0028228759765625,0.022857666015625,-0.0024871830828487873077392578125,0.0014801030047237873077392578125,0.0000762940035201609134674072265625,-0.0001068119963747449219226837158203125,-0.001785277971066534519195556640625,0.001617431989870965480804443359375,-0.025909423828125,-0.0083160400390625,-0.15130615234375,-0.19805908203125,-1.014617919921875,0.9351959228515625,0.109161376953125,0.1436767578125,-0.006134033203125,0.02178955078125,-0.00270080589689314365386962890625,0.00138855003751814365386962890625,0.00006103499981691129505634307861328125,-0.0001068119963747449219226837158203125,-0.001907348982058465480804443359375,0.0012664790265262126922607421875,-0.0268402099609375,-0.012420654296875,-0.1519622802734375,-0.22198486328125,-1.0319366455078125,0.913055419921875,0.088775634765625,0.1406707763671875,-0.0092315673828125,0.02069091796875,-0.00288391089998185634613037109375,0.001296996953897178173065185546875,0.00006103499981691129505634307861328125,-0.0001220699996338225901126861572265625,-0.00201415992341935634613037109375,0.0008697509765625,-0.0277252197265625,-0.0167083740234375,-0.152069091796875,-0.2465057373046875,-1.04815673828125,0.8900909423828125,0.0691680908203125,0.137298583984375,-0.012115479446947574615478515625,0.0195770263671875,-0.00305175804533064365386962890625,0.001205443986691534519195556640625,0.00004577599975164048373699188232421875,-0.000137328999699093401432037353515625,-0.00212097191251814365386962890625,0.000442504999227821826934814453125,-0.028533935546875,-0.02117919921875,-0.1515960693359375,-0.2715911865234375,-1.0632171630859375,0.866363525390625,0.05035400390625,0.1335906982421875,-0.014801025390625,0.018463134765625,-0.00317382789216935634613037109375,0.001113891950808465480804443359375,0.00004577599975164048373699188232421875,-0.000152588007040321826934814453125,-0.0022430419921875,-0.000030518000130541622638702392578125,-0.0292816162109375,-0.02581787109375,-0.1504974365234375,-0.297210693359375,-1.077117919921875,0.841949462890625,0.032379150390625,0.1295623779296875,-0.0172576904296875,0.0173492431640625,-0.0032806401140987873077392578125,0.001037598005495965480804443359375,0.000030518000130541622638702392578125,-0.00016784699982963502407073974609375,-0.0023498539812862873077392578125,-0.0005493159987963736057281494140625,-0.029937744140625,-0.030609130859375,-0.148773193359375,-0.3233184814453125,-1.08978271484375,0.816864013671875,0.015228270553052425384521484375,0.1252593994140625,-0.01953125,0.0162353515625,-0.0033721919171512126922607421875,0.0009613040019758045673370361328125,0.000030518000130541622638702392578125,-0.00019836399587802588939666748046875,-0.0024566650390625,-0.00109863304533064365386962890625,-0.0305328369140625,-0.035552978515625,-0.1463623046875,-0.3498687744140625,-1.1012115478515625,0.7912139892578125,-0.00106811500154435634613037109375,0.120697021484375,-0.021575927734375,0.0151214599609375,-0.00341796898283064365386962890625,0.00088500999845564365386962890625,0.000030518000130541622638702392578125,-0.000213623003219254314899444580078125,-0.0025787348859012126922607421875,-0.0016937260515987873077392578125,-0.031005859375,-0.0406341552734375,-0.1432647705078125,-0.376800537109375,-1.1113739013671875,0.7650299072265625,-0.016510009765625,0.1159210205078125,-0.0234222412109375,0.0140228271484375,-0.00346374488435685634613037109375,0.0008087159949354827404022216796875,0.000030518000130541622638702392578125,-0.00024414100334979593753814697265625,-0.00268554710783064365386962890625,-0.00233459495939314365386962890625,-0.0313873291015625,-0.04583740234375,-0.1394500732421875,-0.404083251953125,-1.1202239990234375,0.738372802734375,-0.0310821533203125,0.1109466552734375,-0.02508544921875,0.012939453125,-0.00347900390625,0.000747681013308465480804443359375,0.0000152590000652708113193511962890625,-0.0002593990066088736057281494140625,-0.0027923579327762126922607421875,-0.0030059809796512126922607421875,-0.0316619873046875,-0.0511322021484375,-0.1348876953125,-0.4316558837890625,-1.12774658203125,0.7113189697265625,-0.0447845458984375,0.1058197021484375,-0.0265350341796875,0.0118865966796875,-0.00347900390625,0.0006866459734737873077392578125,0.0000152590000652708113193511962890625,-0.0002899169921875,-0.002899169921875,-0.0037231449969112873077392578125,-0.0318145751953125,-0.0565338134765625,-0.12957763671875,-0.45947265625,-1.1339263916015625,0.6839141845703125,-0.0576171875,0.1005401611328125,-0.027801513671875,0.0108489990234375,-0.00346374488435685634613037109375,0.000625610002316534519195556640625,0.0000152590000652708113193511962890625,-0.00032043500686995685100555419921875,-0.00299072288908064365386962890625,-0.004486083984375,-0.0318450927734375,-0.0619964599609375,-0.12347412109375,-0.4874725341796875,-1.138763427734375,0.656219482421875,-0.0695953369140625,0.0951690673828125,-0.0288848876953125,0.0098419189453125,-0.0034332280047237873077392578125,0.000579833984375,0.0000152590000652708113193511962890625,-0.0003662109957076609134674072265625,-0.0030822749249637126922607421875,-0.0052947998046875,-0.03173828125,-0.0675201416015625,-0.1165771484375,-0.5156097412109375,-1.1422119140625,0.6282958984375,-0.0806884765625,0.0897064208984375,-0.02978515625,0.0088653564453125,-0.00338745093904435634613037109375,0.0005340580246411263942718505859375,0.0000152590000652708113193511962890625,-0.00039672901039011776447296142578125,-0.00317382789216935634613037109375,-0.0061187739484012126922607421875,-0.0314788818359375,-0.07305908203125,-0.108856201171875,-0.5438232421875,-1.144287109375,0.6002197265625,-0.0909271240234375,0.0841827392578125,-0.030517578125,0.007919312454760074615478515625,-0.003326416015625,0.0004730219952762126922607421875,0.0000152590000652708113193511962890625";
      String[] var3;
      float[] var1 = new float[(var3 = "0,-0.000442504999227821826934814453125,0.0032501220703125,-0.0070037841796875,0.0310821533203125,-0.0786285400390625,0.100311279296875,-0.5720367431640625,1.144989013671875,0.5720367431640625,0.100311279296875,0.0786285400390625,0.0310821533203125,0.0070037841796875,0.0032501220703125,0.000442504999227821826934814453125,-0.0000152590000652708113193511962890625,-0.0004730219952762126922607421875,0.003326416015625,-0.007919312454760074615478515625,0.030517578125,-0.0841827392578125,0.0909271240234375,-0.6002197265625,1.144287109375,0.5438232421875,0.108856201171875,0.07305908203125,0.0314788818359375,0.0061187739484012126922607421875,0.00317382789216935634613037109375,0.00039672901039011776447296142578125,-0.0000152590000652708113193511962890625,-0.0005340580246411263942718505859375,0.00338745093904435634613037109375,-0.0088653564453125,0.02978515625,-0.0897064208984375,0.0806884765625,-0.6282958984375,1.1422119140625,0.5156097412109375,0.1165771484375,0.0675201416015625,0.03173828125,0.0052947998046875,0.0030822749249637126922607421875,0.0003662109957076609134674072265625,-0.0000152590000652708113193511962890625,-0.000579833984375,0.0034332280047237873077392578125,-0.0098419189453125,0.0288848876953125,-0.0951690673828125,0.0695953369140625,-0.656219482421875,1.138763427734375,0.4874725341796875,0.12347412109375,0.0619964599609375,0.0318450927734375,0.004486083984375,0.00299072288908064365386962890625,0.00032043500686995685100555419921875,-0.0000152590000652708113193511962890625,-0.000625610002316534519195556640625,0.00346374488435685634613037109375,-0.0108489990234375,0.027801513671875,-0.1005401611328125,0.0576171875,-0.6839141845703125,1.1339263916015625,0.45947265625,0.12957763671875,0.0565338134765625,0.0318145751953125,0.0037231449969112873077392578125,0.002899169921875,0.0002899169921875,-0.0000152590000652708113193511962890625,-0.0006866459734737873077392578125,0.00347900390625,-0.0118865966796875,0.0265350341796875,-0.1058197021484375,0.0447845458984375,-0.7113189697265625,1.12774658203125,0.4316558837890625,0.1348876953125,0.0511322021484375,0.0316619873046875,0.0030059809796512126922607421875,0.0027923579327762126922607421875,0.0002593990066088736057281494140625,-0.0000152590000652708113193511962890625,-0.000747681013308465480804443359375,0.00347900390625,-0.012939453125,0.02508544921875,-0.1109466552734375,0.0310821533203125,-0.738372802734375,1.1202239990234375,0.404083251953125,0.1394500732421875,0.04583740234375,0.0313873291015625,0.00233459495939314365386962890625,0.00268554710783064365386962890625,0.00024414100334979593753814697265625,-0.000030518000130541622638702392578125,-0.0008087159949354827404022216796875,0.00346374488435685634613037109375,-0.0140228271484375,0.0234222412109375,-0.1159210205078125,0.016510009765625,-0.7650299072265625,1.1113739013671875,0.376800537109375,0.1432647705078125,0.0406341552734375,0.031005859375,0.0016937260515987873077392578125,0.0025787348859012126922607421875,0.000213623003219254314899444580078125,-0.000030518000130541622638702392578125,-0.00088500999845564365386962890625,0.00341796898283064365386962890625,-0.0151214599609375,0.021575927734375,-0.120697021484375,0.00106811500154435634613037109375,-0.7912139892578125,1.1012115478515625,0.3498687744140625,0.1463623046875,0.035552978515625,0.0305328369140625,0.00109863304533064365386962890625,0.0024566650390625,0.00019836399587802588939666748046875,-0.000030518000130541622638702392578125,-0.0009613040019758045673370361328125,0.0033721919171512126922607421875,-0.0162353515625,0.01953125,-0.1252593994140625,-0.015228270553052425384521484375,-0.816864013671875,1.08978271484375,0.3233184814453125,0.148773193359375,0.030609130859375,0.029937744140625,0.0005493159987963736057281494140625,0.0023498539812862873077392578125,0.00016784699982963502407073974609375,-0.000030518000130541622638702392578125,-0.001037598005495965480804443359375,0.0032806401140987873077392578125,-0.0173492431640625,0.0172576904296875,-0.1295623779296875,-0.032379150390625,-0.841949462890625,1.077117919921875,0.297210693359375,0.1504974365234375,0.02581787109375,0.0292816162109375,0.000030518000130541622638702392578125,0.0022430419921875,0.000152588007040321826934814453125,-0.00004577599975164048373699188232421875,-0.001113891950808465480804443359375,0.00317382789216935634613037109375,-0.018463134765625,0.014801025390625,-0.1335906982421875,-0.05035400390625,-0.866363525390625,1.0632171630859375,0.2715911865234375,0.1515960693359375,0.02117919921875,0.028533935546875,-0.000442504999227821826934814453125,0.00212097191251814365386962890625,0.000137328999699093401432037353515625,-0.00004577599975164048373699188232421875,-0.001205443986691534519195556640625,0.00305175804533064365386962890625,-0.0195770263671875,0.012115479446947574615478515625,-0.137298583984375,-0.0691680908203125,-0.8900909423828125,1.04815673828125,0.2465057373046875,0.152069091796875,0.0167083740234375,0.0277252197265625,-0.0008697509765625,0.00201415992341935634613037109375,0.0001220699996338225901126861572265625,-0.00006103499981691129505634307861328125,-0.001296996953897178173065185546875,0.00288391089998185634613037109375,-0.02069091796875,0.0092315673828125,-0.1406707763671875,-0.088775634765625,-0.913055419921875,1.0319366455078125,0.22198486328125,0.1519622802734375,0.012420654296875,0.0268402099609375,-0.0012664790265262126922607421875,0.001907348982058465480804443359375,0.0001068119963747449219226837158203125,-0.00006103499981691129505634307861328125,-0.00138855003751814365386962890625,0.00270080589689314365386962890625,-0.02178955078125,0.006134033203125,-0.1436767578125,-0.109161376953125,-0.9351959228515625,1.014617919921875,0.19805908203125,0.15130615234375,0.0083160400390625,0.025909423828125,-0.001617431989870965480804443359375,0.001785277971066534519195556640625,0.0001068119963747449219226837158203125,-0.0000762940035201609134674072265625,-0.0014801030047237873077392578125,0.0024871830828487873077392578125,-0.022857666015625,0.0028228759765625,-0.1462554931640625,-0.13031005859375,-0.95648193359375,0.996246337890625,0.1747894287109375,0.150115966796875,0.0043945307843387126922607421875,0.024932861328125,-0.00193786597810685634613037109375,0.0016937260515987873077392578125,0.0000915530035854317247867584228515625,-0.0000762940035201609134674072265625,-0.001586913946084678173065185546875,0.00222778297029435634613037109375,-0.0239105224609375,-0.0006866459734737873077392578125,-0.1484222412109375,-0.1522064208984375,-0.9768524169921875,0.9768524169921875,0.1522064208984375,0.1484222412109375,0.0006866459734737873077392578125,0.0239105224609375,-0.00222778297029435634613037109375,0.001586913946084678173065185546875,0.0000762940035201609134674072265625,-0.0000915530035854317247867584228515625,-0.0016937260515987873077392578125,0.00193786597810685634613037109375,-0.024932861328125,-0.0043945307843387126922607421875,-0.150115966796875,-0.1747894287109375,-0.996246337890625,0.95648193359375,0.13031005859375,0.1462554931640625,-0.0028228759765625,0.022857666015625,-0.0024871830828487873077392578125,0.0014801030047237873077392578125,0.0000762940035201609134674072265625,-0.0001068119963747449219226837158203125,-0.001785277971066534519195556640625,0.001617431989870965480804443359375,-0.025909423828125,-0.0083160400390625,-0.15130615234375,-0.19805908203125,-1.014617919921875,0.9351959228515625,0.109161376953125,0.1436767578125,-0.006134033203125,0.02178955078125,-0.00270080589689314365386962890625,0.00138855003751814365386962890625,0.00006103499981691129505634307861328125,-0.0001068119963747449219226837158203125,-0.001907348982058465480804443359375,0.0012664790265262126922607421875,-0.0268402099609375,-0.012420654296875,-0.1519622802734375,-0.22198486328125,-1.0319366455078125,0.913055419921875,0.088775634765625,0.1406707763671875,-0.0092315673828125,0.02069091796875,-0.00288391089998185634613037109375,0.001296996953897178173065185546875,0.00006103499981691129505634307861328125,-0.0001220699996338225901126861572265625,-0.00201415992341935634613037109375,0.0008697509765625,-0.0277252197265625,-0.0167083740234375,-0.152069091796875,-0.2465057373046875,-1.04815673828125,0.8900909423828125,0.0691680908203125,0.137298583984375,-0.012115479446947574615478515625,0.0195770263671875,-0.00305175804533064365386962890625,0.001205443986691534519195556640625,0.00004577599975164048373699188232421875,-0.000137328999699093401432037353515625,-0.00212097191251814365386962890625,0.000442504999227821826934814453125,-0.028533935546875,-0.02117919921875,-0.1515960693359375,-0.2715911865234375,-1.0632171630859375,0.866363525390625,0.05035400390625,0.1335906982421875,-0.014801025390625,0.018463134765625,-0.00317382789216935634613037109375,0.001113891950808465480804443359375,0.00004577599975164048373699188232421875,-0.000152588007040321826934814453125,-0.0022430419921875,-0.000030518000130541622638702392578125,-0.0292816162109375,-0.02581787109375,-0.1504974365234375,-0.297210693359375,-1.077117919921875,0.841949462890625,0.032379150390625,0.1295623779296875,-0.0172576904296875,0.0173492431640625,-0.0032806401140987873077392578125,0.001037598005495965480804443359375,0.000030518000130541622638702392578125,-0.00016784699982963502407073974609375,-0.0023498539812862873077392578125,-0.0005493159987963736057281494140625,-0.029937744140625,-0.030609130859375,-0.148773193359375,-0.3233184814453125,-1.08978271484375,0.816864013671875,0.015228270553052425384521484375,0.1252593994140625,-0.01953125,0.0162353515625,-0.0033721919171512126922607421875,0.0009613040019758045673370361328125,0.000030518000130541622638702392578125,-0.00019836399587802588939666748046875,-0.0024566650390625,-0.00109863304533064365386962890625,-0.0305328369140625,-0.035552978515625,-0.1463623046875,-0.3498687744140625,-1.1012115478515625,0.7912139892578125,-0.00106811500154435634613037109375,0.120697021484375,-0.021575927734375,0.0151214599609375,-0.00341796898283064365386962890625,0.00088500999845564365386962890625,0.000030518000130541622638702392578125,-0.000213623003219254314899444580078125,-0.0025787348859012126922607421875,-0.0016937260515987873077392578125,-0.031005859375,-0.0406341552734375,-0.1432647705078125,-0.376800537109375,-1.1113739013671875,0.7650299072265625,-0.016510009765625,0.1159210205078125,-0.0234222412109375,0.0140228271484375,-0.00346374488435685634613037109375,0.0008087159949354827404022216796875,0.000030518000130541622638702392578125,-0.00024414100334979593753814697265625,-0.00268554710783064365386962890625,-0.00233459495939314365386962890625,-0.0313873291015625,-0.04583740234375,-0.1394500732421875,-0.404083251953125,-1.1202239990234375,0.738372802734375,-0.0310821533203125,0.1109466552734375,-0.02508544921875,0.012939453125,-0.00347900390625,0.000747681013308465480804443359375,0.0000152590000652708113193511962890625,-0.0002593990066088736057281494140625,-0.0027923579327762126922607421875,-0.0030059809796512126922607421875,-0.0316619873046875,-0.0511322021484375,-0.1348876953125,-0.4316558837890625,-1.12774658203125,0.7113189697265625,-0.0447845458984375,0.1058197021484375,-0.0265350341796875,0.0118865966796875,-0.00347900390625,0.0006866459734737873077392578125,0.0000152590000652708113193511962890625,-0.0002899169921875,-0.002899169921875,-0.0037231449969112873077392578125,-0.0318145751953125,-0.0565338134765625,-0.12957763671875,-0.45947265625,-1.1339263916015625,0.6839141845703125,-0.0576171875,0.1005401611328125,-0.027801513671875,0.0108489990234375,-0.00346374488435685634613037109375,0.000625610002316534519195556640625,0.0000152590000652708113193511962890625,-0.00032043500686995685100555419921875,-0.00299072288908064365386962890625,-0.004486083984375,-0.0318450927734375,-0.0619964599609375,-0.12347412109375,-0.4874725341796875,-1.138763427734375,0.656219482421875,-0.0695953369140625,0.0951690673828125,-0.0288848876953125,0.0098419189453125,-0.0034332280047237873077392578125,0.000579833984375,0.0000152590000652708113193511962890625,-0.0003662109957076609134674072265625,-0.0030822749249637126922607421875,-0.0052947998046875,-0.03173828125,-0.0675201416015625,-0.1165771484375,-0.5156097412109375,-1.1422119140625,0.6282958984375,-0.0806884765625,0.0897064208984375,-0.02978515625,0.0088653564453125,-0.00338745093904435634613037109375,0.0005340580246411263942718505859375,0.0000152590000652708113193511962890625,-0.00039672901039011776447296142578125,-0.00317382789216935634613037109375,-0.0061187739484012126922607421875,-0.0314788818359375,-0.07305908203125,-0.108856201171875,-0.5438232421875,-1.144287109375,0.6002197265625,-0.0909271240234375,0.0841827392578125,-0.030517578125,0.007919312454760074615478515625,-0.003326416015625,0.0004730219952762126922607421875,0.0000152590000652708113193511962890625".split(",")).length];

      for(int var2 = 0; var2 < var1.length; ++var2) {
         var1[var2] = (new BigDecimal(var3[var2])).floatValue();
      }

      return var1;
   }

   private static float[][] a(float[] var0, int var1) {
      float[][] var2 = new float[var1 = var0.length / 16][];

      for(int var3 = 0; var3 < var1; ++var3) {
         int var10003 = var3 << 4;
         int var6 = 16;
         int var5 = var10003;
         float[] var4 = var0;
         if (var5 + var6 > var0.length) {
            var6 = var0.length - var5;
         }

         if (var6 < 0) {
            var6 = 0;
         }

         float[] var7 = new float[var6];

         for(int var8 = 0; var8 < var6; ++var8) {
            var7[var8] = var4[var5 + var8];
         }

         var2[var3] = var7;
      }

      return var2;
   }
}
